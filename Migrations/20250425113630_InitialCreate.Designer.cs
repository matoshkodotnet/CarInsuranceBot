// <auto-generated />
using System;
using CarInsuranceBot.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CarInsuranceBot.Migrations
{
    [DbContext(typeof(BotDbContext))]
    [Migration("20250425113630_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.4");

            modelBuilder.Entity("CarInsuranceBot.Data.Entities.Document", b =>
                {
                    b.Property<int>("DocumentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<long>("ChatId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<int>("DocumentTypeId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ExtractedData")
                        .HasColumnType("TEXT");

                    b.Property<string>("FileId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("DocumentId");

                    b.HasIndex("DocumentTypeId");

                    b.HasIndex("UserId");

                    b.ToTable("Documents");
                });

            modelBuilder.Entity("CarInsuranceBot.Data.Entities.DocumentType", b =>
                {
                    b.Property<int>("DocumentTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("TypeName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("DocumentTypeId");

                    b.ToTable("DocumentTypes");

                    b.HasData(
                        new
                        {
                            DocumentTypeId = 1,
                            Description = "Паспорт користувача",
                            TypeName = "Passport"
                        },
                        new
                        {
                            DocumentTypeId = 2,
                            Description = "Документ транспортного засобу",
                            TypeName = "VehicleDoc"
                        });
                });

            modelBuilder.Entity("CarInsuranceBot.Data.Entities.Step", b =>
                {
                    b.Property<int>("StepId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("StepName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("StepId");

                    b.ToTable("Steps");

                    b.HasData(
                        new
                        {
                            StepId = 1,
                            Description = "Очікування завантаження фото паспорта",
                            StepName = "PassportUpload"
                        },
                        new
                        {
                            StepId = 2,
                            Description = "Очікування завантаження фото документа транспортного засобу",
                            StepName = "VehicleDocUpload"
                        },
                        new
                        {
                            StepId = 3,
                            Description = "Очікування підтвердження витягнутих даних",
                            StepName = "DataConfirmation"
                        },
                        new
                        {
                            StepId = 4,
                            Description = "Очікування підтвердження ціни",
                            StepName = "PriceConfirmation"
                        },
                        new
                        {
                            StepId = 5,
                            Description = "Процес завершено",
                            StepName = "Completed"
                        });
                });

            modelBuilder.Entity("CarInsuranceBot.Data.Entities.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<long>("ChatId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("CarInsuranceBot.Data.Entities.UserStep", b =>
                {
                    b.Property<int>("UserStepId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<long>("ChatId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("StepId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("UserStepId");

                    b.HasIndex("StepId");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("UserSteps");
                });

            modelBuilder.Entity("CarInsuranceBot.Data.Entities.Document", b =>
                {
                    b.HasOne("CarInsuranceBot.Data.Entities.DocumentType", "DocumentType")
                        .WithMany("Documents")
                        .HasForeignKey("DocumentTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CarInsuranceBot.Data.Entities.User", "User")
                        .WithMany("Documents")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DocumentType");

                    b.Navigation("User");
                });

            modelBuilder.Entity("CarInsuranceBot.Data.Entities.UserStep", b =>
                {
                    b.HasOne("CarInsuranceBot.Data.Entities.Step", "Step")
                        .WithMany("UserSteps")
                        .HasForeignKey("StepId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CarInsuranceBot.Data.Entities.User", "User")
                        .WithOne("CurrentStep")
                        .HasForeignKey("CarInsuranceBot.Data.Entities.UserStep", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Step");

                    b.Navigation("User");
                });

            modelBuilder.Entity("CarInsuranceBot.Data.Entities.DocumentType", b =>
                {
                    b.Navigation("Documents");
                });

            modelBuilder.Entity("CarInsuranceBot.Data.Entities.Step", b =>
                {
                    b.Navigation("UserSteps");
                });

            modelBuilder.Entity("CarInsuranceBot.Data.Entities.User", b =>
                {
                    b.Navigation("CurrentStep")
                        .IsRequired();

                    b.Navigation("Documents");
                });
#pragma warning restore 612, 618
        }
    }
}
